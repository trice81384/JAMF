#!/bin/bash

## Version 2
## 12/21/21
## Tom Rice (Macadmins: trice Github: trice81384)

### This script is designed to be run once a day via Jamf and check for a cached macOS installer. 
### If the installer is not cached or is cached improperly (based on size) then another cache attempt is executed.
### A dummy receipt is also created to be used in conjunction with a smart group to present the installer in Self Service once cached.

### This script is designed to call another Jamf policy via a custom trigger that is set to cache an OS Installer package.
### In most cases this will be a PKG that when run (via another method) will place the OS Installer in the Applications folder.
### It is recommended he policy that is called should be scoped to all computers with a custom trigger that is named 'cachemacOSName'.
### Where macOSName is the name of the OS you want to cache.
### It is also recommended that that policy that runs this script is scoped to only the machines you wish to upgrade.

### It may be necessary to package some larger OS Installers as DMGs. The logic for DMGs is not covered in this script. 
### Some larger DMGs can be split into smaller parts, wrapped in PKGs, installed, the DMGs mounted + reassembled, and
### then the OS Installer it contains copied to the Waiting Room. In which case this script can then be used to validate
### the cached package.

################### Define Global Variables #############################################

## Parameter 4 passed in from Jamf will set the name of the macOS to be installed.
macOSName="$4"

## Fill in the values as needed for the version of the OS you'll be caching. 
## Add additional OS Versions as needed.
## Some Values are:
## Mojave: Version: 10.14.6, Build: 18G84
## Catalina: Version: 10.15.7, Build: 19H15
## Big Sur: Version: 11.6, Build: 20G164

case "$macOSName" in
     "Mojave" )
	    #Version of the macOS to be installed
        macOSVersion=""

	    #Build of the macOS to be installed
        macOSBuild=""

	    #Name of the OS Installer Package
	    PackageName=""
		
	    #Location of cached Installer
	    CachedmacOSFile="/Library/Application Support/Jamf/Waiting Room/$PackageName"

	    #Expected Size of the Cached installer
	    CachedFileSize=""
		
        ## Free space needed to cache package measured in Gigibytes
        ## Found by taking the amount of GB needed, converting to Gi, and rounding to the next whole number
        ## GB * (1000^3) / (1024^3)
        needed_free_space=""

	    #Catalina Cache Trigger
        cachemacOS="cache$macOSName"
	 ;;

	 "Catalina" )
		#Version of the macOS to be installed
		macOSVersion=""
		
		#Version of the macOS to be installed
		macOSBuild=""
		
		#Name of the OS Installer Package
		PackageName=""
		
		#Location of cached Installer
		CachedmacOSFile="/Library/Application Support/Jamf/Waiting Room/$PackageName"
		
		#Expected Size of the Cached installer
		CachedFileSize=""
		
        ## Free space needed to cache package measured in Gigibytes
        ## Found by taking the amount of GB needed, converting to Gi, and rounding to the next whole number
        ## GB * (1000^3) / (1024^3)
        needed_free_space=""

		#Catalina Cache Trigger
        cachemacOS="cache$macOSName"
	;;
	
	 "Big Sur" )
		#Version of the macOS to be installed
		macOSVersion=""
		
		#Version of the macOS to be installed
		macOSBuild=""
		
		#Name of the OS Installer Package
		PackageName=""
		
		#Location of cached Installer
		CachedmacOSFile="/Library/Application Support/Jamf/Waiting Room/$PackageName"
		
		#Expected Size of the Cached installer
		CachedFileSize=""
		
        ## Free space needed to cache package measured in Gigibytes
        ## Found by taking the amount of GB needed, converting to Gi, and rounding to the next whole number
        ## GB * (1000^3) / (1024^3)
        needed_free_space=""

		#Big Sur Cache Trigger
        cachemacOS="cache$macOSName"
	;;
	
	*)
		echo "Unknown OS input in parameter 4, exiting with error...."
		exit 1
	;;
	esac

## Free space on target disk measured in Gigibytes
available_free_space=$(df -g / | tail -1 | awk '{print $4}')
## Location of the macOS Upgrade deferral counter
UpdateAttemptsFile="/etc/.macOSUpdateAttempts.txt"

## Check to see if any remnants from a previous OS upgrade deferral process exist. Remove them if they do.
echo "Removing previous OS upgrade deferral file."
if [[ -e "$UpdateAttemptsFile" ]]
then
  rm -rf $UpdateAttemptsFile
fi

######################### Existing macOS Downloads Check  ####################################
## Check to see if previous macOS installers have been downloaded and if so remove them.

for OSInstaller in /Applications/*Install\ macOS*
do
   if [[ -e "$OSInstaller" ]]
   then
    ## Check to see if the build of the installer matches the build of the OS we want to install
    ## so we don't delete a valid installer unnecessarily.
    InstallerBuild=$(defaults read "$OSInstaller"/Contents/Info.plist DTSDKBuild)
     if [[ "$InstallerBuild" != "$macOSBuild" ]]
     then
       ScriptLogging "Old $OSInstaller found. Deleting."
       rm -rf "$OSInstaller"
     fi
   fi
done

######################### Free Space Check ###############################################
##  Check if sufficient space for caching the macOS installer package.

if [[ "$available_free_space" -ge "$needed_free_space" ]]
then
  echo "Sufficient free disk to cache and install $macOSVersion."
else
  echo "Needed free space to cache macOS $macOSVersion installation is $needed_free_space GB."  
  echo "Not enough free space to cache. Exiting with error code...."
  exit 1
fi

######################### JAMF Binary Check  ############################################
## This if statement is designed to check for the location of the Jamf binary in multiple 
## places due to changes in OSX associated with JAMF's upgrade to version 9.81.
## References to the JAMF Binary must be changed to "$jamfBinary".

if [[ -e /usr/local/jamf/bin/jamf ]]
then
	# JAMF Binary found at 9.81 or later location
	echo "JAMF Binary found at 9.81 or later location"
	jamfBinary="/usr/local/jamf/bin/jamf"
	#
elif [[ -e /usr/local/bin/jamf ]]
then
	# Alias to the JAMF Binary found
	echo "Alias to the JAMF Binary found"
	jamfBinary="/usr/local/bin/jamf"
	#
else
	echo "JAMF Binary not found"
fi

######################### Cache Check ###################################################
## Check to see if a macOS installer package has previously been cached correctly. If not cache it.

if [[ -e "$CachedmacOSFile" ]]
then
	if [[ $(stat -f %z "$CachedmacOSFile") -ge "$CachedFileSize" ]]
	then
		echo "$macOSName $macOSVersion Cached Fully"
		## Added to create a dummy receipt to create a smart group to allow users to install from Self Service if desired.
		## Dummy receipt depends on if macOS is cached correctly.
		if [[ ! -e /Library/Application\ Support/JAMF/Receipts/"$macOSName"-"$macOSVersion"_SS.pkg ]]
		then
			echo "Creating dummy receipt for Self Service Policy"
			touch /Library/Application\ Support/JAMF/Receipts/"$macOSName"-"$macOSVersion"_SS.pkg 
			"$jamfBinary" recon
		fi
	else 
		echo "$macOSName $macOSVersion not cached correctly. Removing failed download attempts and recaching"
		rm -r "$CachedmacOSFile"
		rm -r "$CachedmacOSFile.cache.xml" &> /dev/null
		"$jamfBinary" policy -event "$cachemacOS"
	fi
else
	echo "$macOSName $macOSVersion installer not Found. Caching."
	"$jamfBinary" policy -event "$cachemacOS"
fi
