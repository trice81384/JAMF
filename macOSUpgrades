#!/bin/bash

## Version 3
## 4/21/22
## Tom Rice (Macadmins: trice Github: trice81384)

### This script is designed to be run once a day from Jamf and check for a cached macOS installer.
### If the installer exists and a user is logged in they are prompted to install the update.
### A user is given x amount of chances to install the update on their own. On the x+1 execution macOS is forcibly installed.
### If the installer does not exist it will be cached for a future attempt and a dummy receipt created to be used in conjunction with a smart group
### to present the installer in Self Service.

### A separate policy to actually cache the installer needs to exist with a custom trigger named 'cacheNAME OF THE OS FROM THE BELOW CASE STATEMENT'

### It is recommended that that policy that runs this script is scoped to only the machines you wish to upgrade.

### Special thanks to the following for inspiration on various parts of the script:
### Rich Trouton
### https://github.com/rtrouton
### Mike M
### https://github.com/mm2270
### Alexander Wolpert 
### https://github.com/alex030
### Graham Pugh
### https://github.com/grahampugh
### FreeGeek
### https://github.com/freegeek-pdx
### All the people on JAMF Nation and MacAdmins Slack.

ScriptLogging(){
# Function to provide logging of the script's actions either to the console or the log file specified.
    local LogStamp=$(date +%Y-%m-%d\ %H:%M:%S)
    if [[ -n "$2" ]]
    then
      LOG="$2"
    else
      LOG="PATH TO LOG FILE HERE"
    fi
    
    ## To output to a log file append ' >> $LOG' to the below echo statement 
    echo "$LogStamp" " $1"
}

################### Define Global Variables #############################################

## Parameter 4 passed in from Jamf will set the name of the macOS to be installed.
## This value is used in the case statement below to define parameters for the OS as well
## as elsewhere throughout the script such as Jamf Helper dialogs.
macOSName="$4"

## Parameter 5 passed in from Jamf will set the total amount of update chances we will give the user.
## We'll use this variable for both deferral and password attempts.
## If no value is specified it will default to 3.
TotalAttempts="$5"

## Parameter 6 passed in from Jamf will set the amount of seconds to wait before rebooting the machine to apply the updates. 
## If no value is specified it will default to 300 seconds or 5 mins.
Seconds="$6"

## Parameter 6 passed in from Jamf will set the name of the organization running the script.
## This name is used in various plists, launch daemons, and other configuration options. 
## If no organization name is specified then the default of "My ORG" will be used.
OrgName="$7"

if [[ -z "$OrgName" ]]
then
OrgName="My ORG"
ScriptLogging "No Organization Name specified. Using \"My ORG\"."
fi

## Remove any white spaces entered with the organizational name and convert it to lower case
FormattedOrgName=$(echo $OrgName | sed 's/ //g' | tr '[:upper:]' '[:lower:]')

## Parameter 8 passed in from Jamf will set the text of the error message to display.
## when a user fails to enter their password correctly too many times or for other messages 
## dealing with passwords or disk ownership.
## If no message is specified then the default of "Please contact your local support team." will be used.
passwordFailMsg="$8"

if [[ -z "$passwordFailMsg" ]]
then
passwordFailMsg="Please contact your local support team."
fi

## Fill in the values as needed for the version of the OS you'll be installing while adding additional OS Versions as needed.
## Some possible values are:
## Mojave: Version: 10.14.6, Build: 18G84
## Catalina: Version: 10.15.7, Build: 19H15
## Big Sur: Version: 11.6, Build: 20G164
## Monterey: Version: 12.3.1, Build: 21E258, Installer Version: 17303

case "$macOSName" in
     "Mojave" )
       #Version of the macOS to be installed
       macOSVersion=""

       #Version of the macOS Installer Application (CFBundleVersion)
       InstallerVersion=""

       #Build of the macOS to be installed
       macOSBuild=""

       #Name of the OS Installer Package
       PackageName=""
		
       ##Location of cached Installer
       CachedmacOSFile="/Library/Application Support/Jamf/Waiting Room/$PackageName"

       #Expected Size of the Cached installer
       CachedFileSize=""
		
       ## Free space needed to cache package measured in Gigibytes
       ## Found by taking the amount of GB needed, converting to Gi, and rounding to the next whole number
       ## GB * (1000^3) / (1024^3)
       needed_free_space=""

       #Catalina Cache Trigger
       cachemacOS="cache$macOSName"
     ;;

     "Catalina" )
       #Version of the macOS to be installed
       macOSVersion=""

       #Version of the macOS Installer Application (CFBundleVersion)
       InstallerVersion=""
		
       #Build of the macOS to be installed
       macOSBuild=""
    	
       #Name of the OS Installer Package
       PackageName=""
		
       #Location of cached Installer
       CachedmacOSFile="/Library/Application Support/Jamf/Waiting Room/$PackageName"
		
       #Expected Size of the Cached installer
       CachedFileSize=""
		
       ## Free space needed to cache package measured in Gigibytes
       ## Found by taking the amount of GB needed, converting to Gi, and rounding to the next whole number
       ## GB * (1000^3) / (1024^3)
       needed_free_space=""

       #Catalina Cache Trigger
       cachemacOS="cache$macOSName"
     ;;
	
     "BigSur" )
       #Version of the macOS to be installed
       macOSVersion=""

       #Version of the macOS Installer Application (CFBundleVersion)
       InstallerVersion=""
		
       #Build of the macOS to be installed
       macOSBuild=""
		
       #Name of the OS Installer Package
       PackageName=""
		
       #Location of cached Installer
       CachedmacOSFile="/Library/Application Support/Jamf/Waiting Room/$PackageName"
		
       #Expected Size of the Cached installer
       CachedFileSize=""
		
       ## Free space needed for install measured in Gigibytes
       ## Found normally by taking the amount of GB needed for the pkg, converting to Gi, and rounding to the next whole number
       ## GB * (1000^3) / (1024^3)
       ## However Apple requires much more free space for Big Sur. Apple recommends 26GB but historically more is required.
       needed_free_space="45"

       #Big Sur Cache Trigger
       cachemacOS="cache$macOSName"
     ;;

     "Monterey" )
       #Version of the macOS to be installed
       macOSVersion=""

       #Version of the macOS Installer Application (CFBundleVersion)
       InstallerVersion=""

       #Build of the macOS to be installed
       macOSBuild=""

       #Name of the OS Installer Package
       PackageName=""

       #Location of cached Installer
       CachedmacOSFile="/Library/Application Support/Jamf/Waiting Room/$PackageName"

       #Expected Size of the Cached installer
       CachedFileSize=""
    
       ## Free space needed for install measured in Gigibytes
       ## Found normally by taking the amount of GB needed for the pkg, converting to Gi, and rounding to the next whole number
       ## GB * (1000^3) / (1024^3)
       ## However Apple requires much more free space for Monterey. Apple recommends 26GB but historically more is required.
       needed_free_space="35"
    
       #Monterey Cache Trigger
       cachemacOS="cache$macOSName"
    ;;

     *)
       echo "Unknown OS input in parameter 4, exiting with error...."
       exit 1
    ;;
esac

## Check the number of seconds passed in for a reboot delay
## Any value other than a number, including a null value, will default the reboot timer to 300 seconds or 5 minutes. 
## reboot timer will default to 300 seconds or 5 minutes. If less that 120 seconds are enter the timer will be set to 2 minutes
## to both give the user enough time to quit any applications and for the 1 minute reboot warning to display.
## We assign the parameter to a variable first just so we don't have to worry about the logic later if we need to.

if [[ "$Seconds" == *[!0-9]* ]] || [[ -z "$Seconds" ]]
then
ScriptLogging "No valid defer time found. Defaulting to 5 mins."
Seconds=300
elif [[ "$Seconds" -le "120" ]]
then
ScriptLogging "Delay timer set to low. Setting to 2 mins."
Seconds=120
fi

### Double parens are required when command substitution is performing arithmetic operations and assignments. ###
### They will be used for most numerical comparisons in the script due to more consistent results. ###

## Figure out the amount of whole minutes from inputted seconds.
## This variable will be displayed to the user.
Minutes=$((Seconds / 60))
ScriptLogging "Machine reboot timer is set to $Minutes minutes."

## Figure out any additional seconds over the total amount of whole minutes
ExtraSeconds=$((Seconds % 60))

## Subtract the additional seconds from the total amount of seconds which will give us 
## a timer/counter variable in whole minutes.
Counter=$((Seconds-ExtraSeconds))

## Validate the amount of deferral chances passed in.
## Any value other than a number, including a null value, will result in the total user chances being set to 3.
## Any number less than 3 will result in the total number of chances being set to 3.
if [[ "$TotalAttempts" == *[!0-9]* ]] || [[ -z "$TotalAttempts" ]]
then
ScriptLogging "No valid deferral count specified. Defaulting to 3 chances."
TotalAttempts="3"
elif [[ "$TotalAttempts" -lt "3" ]]
then
ScriptLogging "Deferrals set too low. Setting to 3 user attempts."
TotalAttempts="3"
fi

## Final Chance is 1 more than TotalAttempts and represents at which count the update process will be forced.
FinalChance=$((TotalAttempts+1))

## Update Deferral Variables
UpdateCount=""
UpdateAttempts=""
UpdateChancesLeft=""
UpdateAttemptsFile="/etc/.macOSUpdateAttempts.txt"
macOSIsCached=""
PowerStatus=""

## Jamf Helper Stuff
## When creating variables to hold Jamf Helper Messages most of them will be kept left justified in the editor to prevent formatting issues.
JAMFHelperPath="/Library/Application Support/JAMF/bin/jamfHelper.app/Contents/MacOS/jamfHelper"
JAMFHelperIcon="/System/Library/CoreServices/CoreTypes.bundle/Contents/Resources/FinderIcon.icns"
JAMFHelperTitle="$OrgName: macOS $macOSName Upgrade"
JAMFHelperHeading="$macOSName Upgrade Ready"
JAMFHelperTextAlignment="left"
JAMFHelperHeaderAlignment="left"

## Get the major version of macOS that computer is upgrading to
macOSUpgradeVersionMajor=$( echo "$macOSVersion" | cut -d. -f1 )
## Get the major/minor version of macOS that computer is upgrading to
macOSUpgradeVersion=$( echo "$macOSVersion" | cut -d. -f1,2 )
## Get major version of OS X currently running on Mac
osVersMajor=$( sw_vers -productVersion | cut -d. -f1 )
## Get minor version of OS X currently running on Mac
osVersMinor=$( sw_vers -productVersion | cut -d. -f2 )
## Get major/minor version of OS X currently running on Mac
osVersFull=$( sw_vers -productVersion | cut -d. -f1,2 )

## Set appropriate Restart icon depending on OS version (Can be used for dialog windows)
if [[ "$osVersMinor" -ge "9" ]]
then
  restartIcon="/System/Library/CoreServices/loginwindow.app/Contents/Resources/Restart.tiff"
else 
  restartIcon="/System/Library/CoreServices/loginwindow.app/Contents/Resources/Restart.png"
fi

## If the file containing the number of software update attempts does not exist or has a size
## of zero bytes then set the number of update attempts to zero by writing just a zero to the file
if [[ ! -s "$UpdateAttemptsFile" ]]
then
  /bin/echo 0 > "$UpdateAttemptsFile"
fi
## Write the contents of UpdateAttemptsFile to a variable so it can be manipulated later
## and written back to the UpdateAttemptsFile based upon user input
UpdateCount=$(/bin/cat $UpdateAttemptsFile)

######################### JAMF Binary Check  ############################################
## This if statement is designed to check for the location of the Jamf binary in multiple 
## places due to changes in OSX associated with JAMF's upgrade to version 9.81
## References to the JAMF Binary must be changed to "$jamfBinary"

if [[ -e /usr/local/jamf/bin/jamf ]]
then
  # JAMF Binary found at 9.81 or later location
  ScriptLogging "JAMF Binary found at 9.81 or later location"
  jamfBinary="/usr/local/jamf/bin/jamf"
elif [[ -e /usr/local/bin/jamf ]]
then
  # Alias to the JAMF Binary found
  ScriptLogging "Alias to the JAMF Binary found"
  jamfBinary="/usr/local/bin/jamf"
else
  ScriptLogging "JAMF Binary not found"
fi

######################### Existing macOS Downloads Check  ###############################
## Check to see if previous macOS installers have been downloaded and if so remove them.
## by checking to see if the version of the installer matches the version of the OS we want to install
## so we don't delete a valid installer unnecessarily.

for OSInstaller in /Applications/*Install\ macOS*
do
   if [[ -e "$OSInstaller" ]]
   then
     InstallerBundleVersion=$(defaults read "$OSInstaller"/Contents/Info.plist CFBundleVersion)
     if [[ "$InstallerBundleVersion" != "$InstallerVersion" ]]
     then
       ScriptLogging "Old $OSInstaller found. Deleting."
       rm -rf "$OSInstaller"
     fi
   fi
done

######################### Free Space Settings ###############################################
FreeSpaceCheck()
{
local state="$1"

## If installing macOS 11 or greater, the needed_free_space value is kept as indicated in the case statement
## at the top of this script. Otherwise, it is set below as follows:
## If the machine is currently running Yosemite or lower than it needs 19GB of free space prior to
## upgrading otherwise it needs 13GB.

if [[ "$macOSUpgradeVersionMajor" -lt "11" ]]
then
  if [[ "$osVersMinor" -le "10" ]]
  then
    needed_free_space="19"
  else
    needed_free_space="13"
  fi
fi

## Get the size of the cached macOS Installer in GB.
## Since this simplified division on returns whole numbers we'll pad the result by 1 GB account for files
## that night be a bit bigger. This also accounts for some disparities between the Finder and the shell
CachedGBSize=$(( (CachedFileSize / 1024 / 1024 / 1024) + 1 ))

## Now add this number to the amount of free space needed to install macOS so we can determine the additional
## amount of free space needed to cache the installer and then install it.
cached_free_space=$(( CachedGBSize + needed_free_space ))

## Free space on target disk measured in Gigibytes
available_free_space=$(df -g / | tail -1 | awk '{print $4}')

CacheSpaceInstallMSG="Your Mac does not have enough
free space to cache and upgrade to 
macOS $macOSName $macOSVersion

At least $cached_free_space GB of free space is needed.

Please back up and remove files that are
no longer needed so that the installer may run."

DiskSpaceInstallMSG="Your Mac does not have enough
free space to upgrade to 
macOS $macOSName $macOSVersion

At least $needed_free_space GB of free space is needed.

Please back up and remove files that are
no longer needed so that the installer may run."

UserResponse=""
if [[ "$available_free_space" -ge "$cached_free_space" ]] && [[ "$state" == "cache" ]]
then
  ScriptLogging "Needed free space to cache and upgrade from macOS $osVersMajor.$osVersMinor to $macOSVersion set to $cached_free_space GB."
  ScriptLogging "$available_free_space gigabytes found as free space on boot drive."
  ScriptLogging "Sufficient free disk to cache $macOSVersion."
elif [[ "$available_free_space" -ge "$needed_free_space" ]] && [[ "$state" == "install" ]]
then
  ScriptLogging "Needed free space to upgrade from macOS $osVersMajor.$osVersMinor to $macOSVersion set to $needed_free_space GB."
  ScriptLogging "$available_free_space gigabytes found as free space on boot drive."
  ScriptLogging "Prompting user to install OS."
elif [[ "$available_free_space" -lt "$cached_free_space" ]] && [[ "$state" == "cache" ]]
then
  ScriptLogging "Needed free space to cache and upgrade from macOS $osVersMajor.$osVersMinor to $macOSVersion set to $cached_free_space GB."
  ScriptLogging "$available_free_space gigabytes found as free space on boot drive."
  ScriptLogging "Not enough free space to cache macOS. Displaying message to user."
  JAMFHelperIcon="/System/Library/CoreServices/CoreTypes.bundle/Contents/Resources/AlertStopIcon.icns"
  UserResponse=$("$JAMFHelperPath" -windowType utility -title "$JAMFHelperTitle" \
                 -icon "$JAMFHelperIcon" -heading "Not Enough Free Space" -alignHeading "$JAMFHelperHeaderAlignment" -description "$CacheSpaceInstallMSG" \
                 -alignDescription "$JAMFHelperTextAlignment" -button1 "Quit" )
elif [[ "$available_free_space" -lt "$needed_free_space" ]] && [[ "$state" == "install" ]]
then
  ScriptLogging "Needed free space to upgrade from macOS $osVersMajor.$osVersMinor to $macOSVersion set to $needed_free_space GB."
  ScriptLogging "$available_free_space gigabytes found as free space on boot drive."
  ScriptLogging "Not enough free space for install displaying message to user."
  JAMFHelperIcon="/System/Library/CoreServices/CoreTypes.bundle/Contents/Resources/AlertStopIcon.icns"
  UserResponse=$("$JAMFHelperPath" -windowType utility -title "$JAMFHelperTitle" \
                 -icon "$JAMFHelperIcon" -heading "Not Enough Free Space" -alignHeading "$JAMFHelperHeaderAlignment" -description "$DiskSpaceInstallMSG" \
                 -alignDescription "$JAMFHelperTextAlignment" -button1 "Quit" )
fi

if [[ $UserResponse == 0 ]] || [[ $UserResponse == 239 ]]
then
  ScriptLogging "User acknowledged disk space alert. Exiting with error code...."
  exit 1
fi
}

######################### macOSCache Check ##############################################
checkmacOSCache()
{
## Check to see if a macOS installer package has previously been cached correctly. If not cache it.
## We must also check to see if the boot drive is formatted as APFS and there is enough free space.

## Boot Drive Format Check
BootDriveFormat=$(/usr/libexec/PlistBuddy -c "print :FilesystemType" /dev/stdin <<< $(diskutil info -plist /))

if [[ "$BootDriveFormat" == "apfs" ]]
then
  ScriptLogging "Boot drive is formatted as $BootDriveFormat."
else
  ScriptLogging "Boot drive is formatted as $BootDriveFormat. Unable to upgrade to $macOSVersion."  
            FormatMSG="Unable to upgrade to macOS $macOSName $macOSVersion

The boot drive on this Mac is
currently formatted as \"$BootDriveFormat\".

It must be reformatted to APFS.

Please contact your local support team to assist."
            JAMFHelperIcon="/System/Library/CoreServices/CoreTypes.bundle/Contents/Resources/AlertStopIcon.icns"
            UserResponse=$("$JAMFHelperPath" -windowType utility -title "$JAMFHelperTitle" \
                  -icon "$JAMFHelperIcon" -heading "$JAMFHelperHeading" -alignHeading "$JAMFHelperHeaderAlignment" -description "$FormatMSG" \
                  -alignDescription "$JAMFHelperTextAlignment" -button1 "Quit" )
  if [[ $UserResponse == 0 ]] || [[ $UserResponse == 239 ]]
  then
    ScriptLogging "User acknowledged format alert. Exiting with error code...."
    exit 1
  fi
fi

## Cache Check
if [[ -e "$CachedmacOSFile" ]]
then
	if [[ `stat -f %z "$CachedmacOSFile"` -ge "$CachedFileSize" ]]
	then
		ScriptLogging "$macOSName $macOSVersion Cached Fully"
		macOSIsCached="Yes"
		## Added to create a dummy receipt to allow users to install from Self Service if they chose to defer the update.
		## Dummy receipt depends on if macOS is cached correctly.
		if [ ! -e /Library/Application\ Support/JAMF/Receipts/"$macOSName"-"$macOSVersion"_SS.pkg ]; then
			ScriptLogging "Creating dummy receipt for Self Service Policy."
			touch /Library/Application\ Support/JAMF/Receipts/"$macOSName"-"$macOSVersion"_SS.pkg 
      ScriptLogging "Running a recon."
			"$jamfBinary" recon &
		fi
	else 
		ScriptLogging "$macOSName $macOSVersion not cached correctly. Removing failed download attempts and recaching"
		rm -r "$CachedmacOSFile"
		rm -r "$CachedmacOSFile.cache.xml" &> /dev/null
		macOSIsCached="No"
	fi
else
	ScriptLogging "$macOSName $macOSVersion installer not Found. Caching."
	macOSIsCached="No"
fi
}

######################### Battery Power Check ###########################################
checkPower()
{
## Check to see if the mac is running on AC Power or has more than 25% of a battery charge in order to start
## the installation process. The 25% number is completely arbitrary based on my own observations and should be 
## adjusted as appropriate. It should be noted Apple's own installers do not check battery percentage nor do they
## stop installations if a battery does not have a sufficient charge.

if [[ $(pmset -g ps | head -1) =~ "AC Power" ]]
   then 
      ScriptLogging "On Power Adapter"
      PowerStatus="Good"
    else
      CurrentBatteryPercentage=$(pmset -g batt | egrep "([0-9]+\%).*" | awk '{print $3}' | tr -d %\;)
      if [[ "$CurrentBatteryPercentage" -ge 25 ]]
      then
      ScriptLogging "Battery is $CurrentBatteryPercentage% Charged"
      PowerStatus="Good"
      else
      ScriptLogging "Battery is $CurrentBatteryPercentage% Charged"
      PowerStatus="Bad"
      fi
fi
}

######################### MacOS Install Initialization #####################################
startUpdate()
{
## The macOS Update process is started in this function. First we check if a user is logged in and if there
## is we see if there is enough free space for the installation. If both of those conditions are met
## then begin the install. We keep them as separate if statements so we can see exactly which condition
## failed. The user is given X chances to update on their own otherwise they update begins automatically on X+1.
## When the update starts the heavy lifting is done in another function.
## Formatting and spacing in the MSG Box Dialogs are important.

## Get Current User
loggedInUser=$(/bin/ls -l /dev/console | /usr/bin/awk '{ print $3 }')
## Get UID associated with the logged in user
userUID=$(id -u "$loggedInUser")

ScriptLogging "Current user is: $loggedInUser"

if [[ "$loggedInUser" != "root" ]]
then
  ## Call the function to check if there is enough free space to run the installer. If there is not the script will exit.
  ## The "install" argument is passed in so the function displays appropriate messaging. 
  FreeSpaceCheck install
  UpdateChancesLeft=$((TotalAttempts - UpdateCount))
  if [[ "$UpdateChancesLeft" = 0 ]]
  then
    installMSG="Deferred installation of 
macOS $macOSName $macOSVersion happening.
           
Please do not shut down your Mac or put it to sleep.
           
IMPORTANT:
We recommend saving any important
documents now. Your Mac will reboot
in order to complete the update."
           
    "$JAMFHelperPath" -windowType utility -title "$JAMFHelperTitle" \
    -icon "$JAMFHelperIcon" -iconSize 128 -heading "$JAMFHelperHeading" -alignHeading "$JAMFHelperHeaderAlignment" -description "$installMSG" \
    -alignDescription "$JAMFHelperTextAlignment" -timeout 15
    ScriptLogging "Forced update of $macOSName $macOSVersion Happening"
    jamfHelperPID=$(pgrep jamfHelper)
    disown "$jamfHelperPID" 2>/dev/null
    installMacOS
  else
    UpdateAttempts=$((UpdateCount + 1))
    InformativeTextMsg="The following is waiting to be installed and requires a restart of your computer:
           
macOS $macOSName $macOSVersion

This is user notification $UpdateAttempts of $TotalAttempts.
Attempt $FinalChance will install $macOSName automatically and your machine will restart.

**You may also run the upgrade from Self Service.**"

    UserResponse=$("$JAMFHelperPath" -windowType utility -title "$JAMFHelperTitle" \
                  -icon "$JAMFHelperIcon" -iconSize 128 -heading "$JAMFHelperHeading" -alignHeading "$JAMFHelperHeaderAlignment" -description "$InformativeTextMsg" \
                  -alignDescription "$JAMFHelperTextAlignment" -button1 "Install" -button2 "Defer" -cancelButton 2 )
    if [[ "$UserResponse" == 2 ]] || [[ "$UserResponse" == 239 ]]
    then
      /bin/echo "$UpdateAttempts" > "$UpdateAttemptsFile"
      ScriptLogging "User choose to defer"
      ScriptLogging "This was user installation attempt $UpdateAttempts of $TotalAttempts."
                   
      ## Calculate deferrals remaining and adjust messaging accordingly
      DeferralsRemaining=$((TotalAttempts - UpdateAttempts))
      if [[ "$DeferralsRemaining" != 0 ]]
      then
        InformativeTextMsg="The update process was deferred.

This was deferral $UpdateAttempts of $TotalAttempts

You will be prompted to install
macOS $macOSName $macOSVersion again tomorrow.

**You may also run the upgrade
from Self Service.**" 
      else
        InformativeTextMsg="The update process was deferred.

There are no more deferrals remaining.
           
macOS $macOSName $macOSVersion
will automatically be installed tomorrow."
      fi

      "$JAMFHelperPath" -windowType utility -title "$JAMFHelperTitle" \
      -icon "$JAMFHelperIcon" -iconSize 128 -heading "$JAMFHelperHeading" -alignHeading "$JAMFHelperHeaderAlignment" -description "$InformativeTextMsg" \
      -alignDescription "$JAMFHelperTextAlignment" -button1 "OK"
      exit 0
    elif [[ "$UserResponse" == 0 ]]
    then
      ScriptLogging "User choose to install $macOSName $macOSVersion."
      ## We capture the JAMF Helper's PID so we can pass it to the disown command which removes it from
      ## the shell's list of watched jobs. The prevents debug messages from being generated when killing the process.
      ## Disown works more reliably then using "wait" for the shell to release the job and piping the output to /dev/null
      jamfHelperPID=$(pgrep jamfHelper)
      disown "$jamfHelperPID" 2>/dev/null
      installMacOS
    fi
  fi
else
  ## No user logged so do nothing
  ScriptLogging "No user logged in. Skipping execution"
fi  
}

######################### User Verification Functions ###################################
check_VolumeOwner(){
CurrentUserValid=""
VolumeOwnerUsers=""
FVEnabledUsers=$(/usr/bin/fdesetup list)

## Make sure we have a clean array
unset VolumeOwnerUsers
## Populate the array with an initial * for formatting purposes
VolumeOwnerUsers+=( "*" )
while IFS= read -r FVuser
do
UserShortName=$(echo "$FVuser" | awk -F "," '{print $1}')
UserGUID=$(echo "$FVuser" | awk -F "," '{print $2}')
VolumeOwner=$(diskutil apfs listcryptousers / | grep -A2 "$UserGUID" | /usr/bin/tail -n1 | /usr/bin/awk '{print $NF}')

if [[ "$UserShortName" == "$loggedInUser" ]] && [[ "$VolumeOwner" == "Yes" ]]
then
## If the current user is also a volume owner we'll set this variable to 'Yes' which we can the use to start the upgrade.
CurrentUserValid="Yes"
elif [[ "$VolumeOwner" == "Yes" ]]
then
## Add user to array
VolumeOwnerUsers+=( "$UserShortName" )
## Add * to the array for formatting purposes
VolumeOwnerUsers+=( "*" )
fi

done < <(printf '%s\n' "$FVEnabledUsers")
}

# The mkuser_verify_password is used to verify the secure token holder's password.
# Credit to Free Geek PDX for the this function whose full documentation can be found here: 
# https://github.com/freegeek-pdx/mkuser/blob/2cd85a512cabf864e7dcfab6aa01ccacdb3a8245/mkuser.sh#L2711

mkuser_verify_password() { # $1 = Account Name, $2 = Password
		if [[ -z "$1" ]]; then # $2 (password) can be an empty string.
			>&2 echo 'Verify Password ERROR: An account name must be specified.'
			return 1
		fi
		verify_password_result="$(echo -nE "$2" | OSASCRIPT_ENV_ACCOUNT_NAME="$1" osascript -l 'JavaScript' -e '
ObjC.import("OpenDirectory") // "Foundation" framework is available in JXA by default, but need to import "OpenDirectory" framework manually (for the required password verification methods):
// https://developer.apple.com/library/archive/releasenotes/InterapplicationCommunication/RN-JavaScriptForAutomation/Articles/OSX10-10.html#//apple_ref/doc/uid/TP40014508-CH109-SW18
let accountName = $.NSProcessInfo.processInfo.environment.objectForKey("OSASCRIPT_ENV_ACCOUNT_NAME")
let password = $.NSString.alloc.initWithDataEncoding($.NSFileHandle.fileHandleWithStandardInput.availableData, $.NSUTF8StringEncoding)
// Code in the open source OpenDirectory "TestApp.m" from Apple contains useful examples for the following OpenDirectory methods used: https://opensource.apple.com/source/OpenDirectory/OpenDirectory-146/Tests/TestApp.m.auto.html
let odSearchNodeError = $() // Create a "nil" object which will be set to any NSError: https://developer.apple.com/library/archive/releasenotes/InterapplicationCommunication/RN-JavaScriptForAutomation/Articles/OSX10-10.html#//apple_ref/doc/uid/TP40014508-CH109-SW27
let odSearchNode = $.ODNode.nodeWithSessionTypeError($.ODSession.defaultSession, $.kODNodeTypeAuthentication, odSearchNodeError) // https://developer.apple.com/documentation/opendirectory/odnode/1569410-nodewithsession?language=objc
let verifyPasswordResult = `Verify Password (Load Node) ERROR: Unknown error loading OpenDirectory "/Search" node.`
if (!odSearchNode.isNil() && odSearchNode.nodeName.js == "/Search") {
	let odUserRecordError = $()
	let odUserRecord = odSearchNode.recordWithRecordTypeNameAttributesError($.kODRecordTypeUsers, accountName, $(), odUserRecordError) // https://developer.apple.com/documentation/opendirectory/odnode/1428065-recordwithrecordtype?language=objc
	if (!odUserRecord.isNil() && odUserRecord.recordName.js == accountName.js) {
		let odVerifyPasswordError = $()
		let odPasswordVerified = odUserRecord.verifyPasswordError(password, odVerifyPasswordError) // https://developer.apple.com/documentation/opendirectory/odrecord/1427894-verifypassword?language=objc
		if (odPasswordVerified === true) { // Make sure odPasswordVerified is a boolean of true and no other truthy value.
			verifyPasswordResult = "VERIFIED"
		} else if (!odVerifyPasswordError.isNil() && odVerifyPasswordError.localizedDescription) {
			verifyPasswordResult = `Verify Password ERROR: ${odVerifyPasswordError.localizedDescription.js} (Error Code: ${odVerifyPasswordError.code})`
		} else {
			verifyPasswordResult = "Verify Password ERROR: Unknown error verifying password."
		}
	} else if (!odUserRecordError.isNil() && odUserRecordError.localizedDescription) {
		verifyPasswordResult = `Verify Password (Load Record) ERROR: ${odUserRecordError.localizedDescription.js} (Error Code: ${odUserRecordError.code})`
	} else {
		verifyPasswordResult = `Verify Password (Load Record) ERROR: OpenDirectory RecordName (user account name "${accountName.js}") does not exist.`
	}
} else if (!odSearchNodeError.isNil() && odSearchNodeError.localizedDescription) {
	verifyPasswordResult = `Verify Password (Load Node) ERROR: ${odSearchNodeError.localizedDescription.js} (Error Code: ${odSearchNodeError.code})`
}
// DO NOT "console.log()" the result since that will go to stderr which is being redirected to "/dev/null" so that only our result string is ever retrieved via stdout.
// This is because I have seen an irrelevant error about failing to establish a connection to the WindowServer (on macOS 10.13 High Sierra at least) that could be
// included in stderr even when password verification was successful which would mess up checking for the exact success string if we were to capture stderr in the output.
verifyPasswordResult // Just having "verifyPasswordResult" as the last statement will make JXA send the value to stdout.
' 2> /dev/null)"

		if [[ "${verify_password_result}" == 'VERIFIED' ]]; then
			#Comment out this echo statement because we only need the return code in this script
      #echo "${verify_password_result}" 
			return 0
		elif [[ -z "${verify_password_result}" ]]; then
			verify_password_result='Verify Password ERROR: Unknown error occurred.'
		fi

		>&2 echo "${verify_password_result}"
		return 1
}

passwordPrompt () {
## Get the logged in user's password via a prompt
ScriptLogging "Prompting ${loggedInUser} for their login password."
## Since we are running this as a command substitution and capturing the output to userPass we must return userPass in the AppleScript.
## We also capture any errors to act on them later since if the user presses cancel (which the OS picks up as an error) it will throw obscure messages to stdOut
## If a user enters text we set userPass to that or if a user presses cancel we set userPass to that error message which is User canceled.
## If userPass is set to User canceled then an if statement checks for that an exits the script otherwise the user's password is validated in an attempt to
## re escrow the individual FileVault key.
## If a user password happens to be User canceled. then the script would also exit.
userPass=$(/bin/launchctl asuser $userUID /usr/bin/osascript -e "
on run
try
display dialog \"Upgrading to macOS $macOSVersion ($macOSName)\" & return & \"requires user authentication.\" & return & \"Enter the login password for '$loggedInUser'\" default answer \"\" with title \"$OrgName macOS $macOSVersion Upgrade\" buttons {\"Cancel\", \"Ok\"} default button 2 with icon POSIX file \"$JAMFHelperIcon\" with text and hidden answer
set userPass to text returned of the result
on error the errorMessage number the errorNumber
    set userPass to errorMessage
return userPass
end try
end run")

if [[ "$userPass" == "User canceled." ]]
then
  ScriptLogging "User Canceled and chose not to upgrade or password was weirdly \"User canceled.\""
  exit 0
fi

##Increment the PasswordTry variable to reflect the amount of times a user has attempted to enter their password.
PasswordTry=$((PasswordTry+1))
ScriptLogging "This was user password change attempt $PasswordTry"
}

successAlert () { # This notification function is not currently called but we'll keep it if we need to use it at some point.
/bin/launchctl asuser $userUID /usr/bin/osascript -e "
on run
display dialog \"\" & return & \"Your password was successfully entered.\" with title \"$OrgName macOS $macOSVersion Upgrade\" buttons {\"Close\"} default button 1 with icon POSIX file \"$JAMFHelperIcon\"
end run"
}

passwordErrorAlert () {
## Since we are running this as a command substitution and capturing the output to userCanceled we must return userCancled in the AppleScript.
## We also capture any errors to act on them later since if the user presses cancel (which the OS picks up as an error) it will throw obscure messages to stdOut
## Since this dialog only shows buttons and pressing Cancel will always throw up the same error number we can just capture error -128 and assign it to
## userCanceled. This way if userCanceled = -128 we exit the script or continue prompting the user.
## ALSO WE MUST capture the output to a variable here instead of a straight AppleScript call otherwise errors seem to not get processed.
userCanceled=$(/bin/launchctl asuser $userUID /usr/bin/osascript -e "
on run
try
display dialog \"The password entered was incorrect\" & return & \" \" & return & \"$verify_password_result\" buttons {\"Cancel\", \"Try Again\"} default button 2 with title \"$OrgName macOS $macOSVersion Upgrade\" with icon POSIX file \"$JAMFHelperIcon\"
on error number -128
    set userCanceled to -128
return userCanceled
end try
end run")
if [[ "$userCanceled" == "-128" ]]
then
ScriptLogging "User cancelled after error validating password."
exit 0
fi
}

passwordFailureAlert () {
ScriptLogging "User attempted to enter their password too many times."
buttonPressed=$(/bin/launchctl asuser $userUID /usr/bin/osascript -e "
on run
display dialog \"ERROR VALIDATING PASSWORD\" & return & \" \" & return & \"$passwordFailMsg\" buttons {\"Close\"} default button 1 with title \"$OrgName macOS $macOSVersion Upgrade\" with icon POSIX file \"$JAMFHelperIcon\"
end run
")
if [[ "$buttonPressed" == "button returned:Close" ]]
then
ScriptLogging "User closed the window"
fi
}

displayVolumeOwners () {
## Notifies the current user of which other users can perform the macOS upgrade
buttonPressed=$(/bin/launchctl asuser $userUID /usr/bin/osascript -e "
on run
display dialog \"The current user does not have permissions to upgrade to macOS $macOSVersion ($macOSName)\" & return & \" \" & return & \"Please login and run the update as one of the following users: ${VolumeOwnerUsers[@]}\" buttons {\"Close\"} default button 1 with title \"$OrgName macOS $macOSVersion Upgrade\" with icon POSIX file \"$JAMFHelperIcon\"
end run
")
if [[ "$buttonPressed" == "button returned:Close" ]]
then
ScriptLogging "User closed the window"
fi
}

noVolumeOwners () {
## Notifies the user that there is no user capable of performing the macOS Upgrade.
buttonPressed=$(/bin/launchctl asuser $userUID /usr/bin/osascript -e "
on run
display dialog \"No users available to perform the upgrade.\" & return & \" \" & return & \"$passwordFailMsg\" buttons {\"Close\"} default button 1 with title \"$OrgName macOS $macOSVersion Upgrade\" with icon POSIX file \"$JAMFHelperIcon\"
end run
")
if [[ "$buttonPressed" == "button returned:Close" ]]
then
ScriptLogging "User closed the window"
fi
}

######################### macOS Installation  ###########################################
installMacOS()
{
## This function actually installs the macOS upgrade. It provides final installation and reboot
## warnings to the user as well as prepping the environment for the installation. It provides the user
## with a set period of time before the computer will start the installation process. That time period is
## defined as a parameter passed into the script. This function also writes local scripts and launch agents
## to the machine so that it's information can be correctly updated in Jamf after the upgade and a to authenticate
## to various FileVault prompts so the user is not burdened with repeated authentications.

## Remove remnants of a failed install
if [[ -e /macOS\ Install\ Data ]]
then
rm -r /macOS\ Install\ Data
fi

## Check to see if the machine is on Apple Silicon and if so check to see if the use running the script is
## a volume owner and if so prompt for a password. If they are not display users (if any) who are able to run the upgrade.
arch=$(/usr/bin/arch)

if [[ "$arch" == "arm64" ]] 
then
  ScriptLogging "This machine is running on Apple Silicon and requires user authentication in order to perform the upgrade."
  ScriptLogging "Checking for volume owners on the disk and prompting for authentication as necessary."
  ## Call the function to check if the current user is a volume owner
  check_VolumeOwner
  if [[ "$CurrentUserValid" == "Yes" ]]
  then
    while true
    do
    ## If the user is a volume owner call functions to prompt them for their password and verify it is correct.
    passwordPrompt
    if mkuser_verify_password "${loggedInUser}" "${userPass}"
    then
      ScriptLogging "Password Verified. Starting macOS Upgrade."
      break 
      else
      ## If a user fails to enter their password too many times notify them and exit the script.
      if [[ $PasswordTry -ge $TotalAttempts ]]
      then
        passwordFailureAlert
        ScriptLogging "Quitting upgrade after too many password failures."
        exit 0
      else
        ## If a user enters their password incorrectly prompt them again until the max number of max tries is reached. 
        passwordErrorAlert
        ScriptLogging "User Password not validated. Prompting them again."
      fi
    fi
    done
  ## If the current logged in user is not a volume owner but there are other volume owners on the disk (the VolumeOwnersUsers
  ## array does not have a size of 0) then notify the user of the other users who can perform the upgrade.
  elif [[ ${#VolumeOwnerUsers[@]} -ne 0 ]]
  then
    ScriptLogging "This machine is running on Apple Silicon and the current user is not a volume owner."
    ScriptLogging "Displaying a list of volume owners who can perform the upgrade."
    displayVolumeOwners
    exit 0
   ## If the current logged in user is not a volume owner and there are no other volume owners on the 
   ## machine notify the user of this and exit the script.  
  else
    ScriptLogging "This machine is running on Apple Silicon and there are volume owners on the disk."
    ScriptLogging "Please create a user who can perform the upgrade to macOS $macOSVersion ($macOSName)."
    noVolumeOwners
    exit 0
  fi
# End Apple Silicon if
fi

## Write out a local script (but don't launch it) and a launch daemon to run a recon
## after the OS is upgraded.
cat <<EOF >/Library/Scripts/UpdateInventory
#!/bin/bash
#
#Get Current OS Version
osVers=\$( sw_vers -productVersion )
## JAMF Binary Check
##
## This if statement is designed to check for the location of the Jamf binary in multiple places 
## due to changes in OSX associated with JAMF's upgrade to version 9.81
## References to the JAMF Binary must be changed to "$jamfBinary"
##
if [ -e /usr/local/jamf/bin/jamf ]
   then
      # JAMF Binary found at 9.81 or later location
      echo "JAMF Binary found at 9.81 or later location"
      jamfBinary="/usr/local/jamf/bin/jamf"
      #
   elif [ -e /usr/local/bin/jamf ]
   then
      # Alias to the JAMF Binary found
      echo "Alias to the JAMF Binary found"
      jamfBinary="/usr/local/bin/jamf"
      #
   else
   echo "JAMF Binary not found"
fi
## End JAMF Check if statement
## Keep running a while loop until the OS reports itself as being on the current version of Mac OS
while [ "\$osVers" != "$macOSVersion" ]
do
sleep 1
osVers=\$( sw_vers -productVersion )
done

## Wait till the JSS is Reachable or 10 mins for network connectivity.
JSSReachable=\$(jamf checkJSSConnection -retry 0 | grep JSS)
while [ "\$JSSReachable" != "The JSS is available." ]
do
echo "Waiting for the JSS to be reachable."
sleep 5
Counter=\$((Counter + 1))
JSSReachable=\$(jamf checkJSSConnection -retry 0 | grep JSS)
if [ "\$Counter" == 120 ]
then
echo "Waited for 10 mins. Giving up."
JSSReachable="The JSS is available."
fi
done
## Run a recon to upgrade the jss
"\$jamfBinary" recon
rm /Library/LaunchDaemons/com.$FormattedOrgName.UpdateInventory.plist
rm /Library/Scripts/UpdateInventory
launchctl unload /Library/LaunchDaemons/com.$FormattedOrgName.UpdateInventory.plist
EOF
chown root:wheel /Library/Scripts/UpdateInventory
chmod 755 /Library/Scripts/UpdateInventory
####Write launch daemon to load cached script
echo '<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple Computer//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
<key>Label</key>
<string>com.'$FormattedOrgName'.UpdateInventory</string>
<key>Program</key>
<string>/Library/Scripts/UpdateInventory</string>
<key>RunAtLoad</key>
<true/>
<key>KeepAlive</key>
<true/>
</dict>
</plist>' > /Library/LaunchDaemons/com."$FormattedOrgName".UpdateInventory.plist
chown root:wheel /Library/LaunchDaemons/com."$FormattedOrgName".UpdateInventory.plist
chmod 644 /Library/LaunchDaemons/com."$FormattedOrgName".UpdateInventory.plist

## Check for the existence of the output file from the JAMF helper command
## left over from previous executions.
if [[ -e /tmp/UserInput ]]
   then
   rm /tmp/UserInput
fi
## Display a JAMF Helper window notifying the user that a reboot in order to upgrade to macOS will happen at 
## a specified period of time and give them the option to enable it immediately.
## We send the output to a named pipe and keep the process running in the background which allows for two things.
## It keeps the window displayed but allows the while loop to start the countdown right away and by sending the 
## output of command to the named pipe we can then continually assign its contents to a variable inside the while
## loop allowing the if statement in that loop to check the status of the variable which equates to a user selecting
## to reboot immediately. If we didn't do it this way the output of the command would only get checked once when the 
## command initially ran.

RebootMsg="Your computer will begin the upgrade
process to mac $macOSName $macOSVersion
in $Minutes mins.
Please save all work and quit any open applications.
Click Reboot to start this process immediately."

FinalRebootMessage="Your computer will begin the upgrade in 1 minute.
Please save all work and quit all applications now."

"$JAMFHelperPath" -windowType utility -title "$JAMFHelperTitle" \
-icon "$JAMFHelperIcon" -iconSize 128 -heading "$JAMFHelperHeading" -alignHeading "$JAMFHelperHeaderAlignment" -description "$RebootMsg" \
-alignDescription "$JAMFHelperTextAlignment" -button1 "Reboot" > /tmp/UserInput &

## While loop to run for at least 120 iterations (which equals 2 mins ) while checking certain conditions.
## The loop will run longer depending upon the amount of seconds passed in as parameter 6.
## We inject a 1 second sleep command into each run of the while loop to account for each second. If we did not
## have the sleep command the loop would execute too quickly. Once the loop is over the macOS Upgrade will start
## and their machine will reboot.
while [ "$Counter" != "0" ]
do
## Check contents of named pipe and assign it to UserResponse
UserResponse=$(cat /tmp/UserInput)
## If UserResponse equals 0 (return code of pushing the button) then we assume user has selected to reboot now so
## we run execute the enable macOS Update policy and reboot the machine so it is enforced for the
## current user on login. We also set the counter 1 one as a safety measure in case it doesn't break out
## of the loop right away. One more subtraction from the counter variable would occur causing it to equal
## 0 which would also cause the loop to end and FileVault to enable. We could use a break statement here to
## but I liked this method.
## If the user response has not equated to 0 then we'll pop up a window displaying that there is only 60
## seconds left before the macOS update is started and a reboot happens. We must get the PID of the previous jamfHelper
## process and disown it first (to prevent unnecessary error messages) then kill it before we display the new
## message.

if [[ "$UserResponse" == "0" ]]
  then
     ScriptLogging "User Choose to reboot. Starting $macOSName $macOSVersion Update."
     Counter="1"
elif [[ "$Counter" == 60 ]]
  then
     jamfHelperUID=$(pgrep jamfHelper)
     disown "$jamfHelperUID" 2>/dev/null
     killall jamfHelper
     "$JAMFHelperPath" -windowType utility -title "$JAMFHelperTitle" \
     -icon "$JAMFHelperIcon" -iconSize 96 -heading "$JAMFHelperHeading" -alignHeading "$JAMFHelperHeaderAlignment" -description "$FinalRebootMessage" \
     -alignDescription "$JAMFHelperTextAlignment" &
fi
sleep 1
Counter=$((Counter - 1))
done
## Remove the named pipe
if [[ -e /tmp/UserInput ]]
   then
   rm /tmp/UserInput
fi
jamfHelperUID=$(pgrep jamfHelper)
disown "$jamfHelperUID" 2>/dev/null
killall jamfHelper
ScriptLogging "Executing $macOSName $macOSVersion Upgrade Policy"
sleep 3
## Delete the update count file once just so it's gone
rm -r "$UpdateAttemptsFile"

## We'll add a JAMF Helper full screen window here because it looks nicer and is more restrictive than a progress bar.
## Since it will be a FS window we must remember to set it as a background process so the installer can actually run.
## And if we happen to have an unpacked OS installer in the Applications folder we can use it's icon for the full screen window
## Capturing the Helper's PID here would be helpful if its to be quit by another other process outside of this script.
## JAMF Helper Variables
if [[ -e "/Applications/Install macOS $macOSName.app" ]]
then
JAMFHelperIcon="/Applications/Install macOS $macOSName.app/Contents/Resources/InstallAssistant.icns"
fi

FSheading="Please wait as we prepare your computer for the $macOSName $macOSVersion upgrade."
FSdescription="
This process will take approximately 5-10 minutes.
Once completed your computer will reboot and begin the upgrade."

## Launch jamfHelper
"$JAMFHelperPath" -windowType fs -title "" -icon "$JAMFHelperIcon" -heading "$FSheading" -description "$FSdescription" &

## Make sure FV does an authenticated restart which might not be necessary but can't hurt.
if [[ ${osVersMinor} -ge 8 ]]
then
     FDE=$(fdesetup status | grep "Off")
     if [[ "$FDE" = "" ]]
     then
           ## Only write out launch agent if the OS is equal to macOS Sierra or higher otherwise it will cause the upgrade to fail.
           if [[ ${osVersMinor} -ge 12 ]]
           then
       ScriptLogging "Write out a Launch Agent to make sure FV Authenticated restarts during the upgrade work as expected."
       cat <<EOF >/Library/LaunchAgents/com.apple.install.osinstallersetupd.plist
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
    <key>Label</key>
    <string>com.apple.install.osinstallersetupd</string>
    <key>LimitLoadToSessionType</key>
    <string>Aqua</string>
    <key>MachServices</key>
    <dict>
        <key>com.apple.install.osinstallersetupd</key>
        <true/>
    </dict>
    <key>TimeOut</key>
    <integer>90</integer>
    <key>OnDemand</key>
    <true/>
    <key>ProgramArguments</key>
    <array>
        <string>/Applications/Install macOS $macOSName.app/Contents/Frameworks/OSInstallerSetup.framework/Resources/osinstallersetupd</string>
    </array>
</dict>
</plist>
EOF
       ScriptLogging "Setting the correct permissions on and launch the launch agent."
       /usr/sbin/chown root:wheel /Library/LaunchAgents/com.apple.install.osinstallersetupd.plist
       /bin/chmod 644 /Library/LaunchAgents/com.apple.install.osinstallersetupd.plist
       launchctl bootstrap gui/${userUID} /Library/LaunchAgents/com.apple.install.osinstallersetupd.plist
       ## End 10.12 Check
       fi
     else
       ScriptLogging "FileVault 2 is not enabled."
     fi
   fi

ScriptLogging "Writing out Setup Assistant Variables."   
for USER_HOME in /Users/*
  do
    USER_UID=$(basename "${USER_HOME}")
    if [[ "${USER_UID}" != "Shared" ]]
    then 
        /usr/bin/defaults write "${USER_HOME}"/Library/Preferences/com.apple.SetupAssistant LastPreLoginTasksPerformedBuild -string "$macOSBuild"
        /usr/bin/defaults write "${USER_HOME}"/Library/Preferences/com.apple.SetupAssistant LastPreLoginTasksPerformedVersion -string "$macOSVersion"
        /usr/bin/defaults write "${USER_HOME}"/Library/Preferences/com.apple.SetupAssistant LastSeenDiagnosticsProductVersion -string "$macOSVersion"
        /usr/bin/defaults write "${USER_HOME}"/Library/Preferences/com.apple.SetupAssistant MiniBuddyShouldLaunchToResumeSetup -bool false
        chown "${USER_UID}":staff "${USER_HOME}"/Library/Preferences/com.apple.SetupAssistant.plist
    fi
  done
  
## Write a dummy receipt to track the upgrades
touch /Library/Application\ Support/JAMF/Receipts/"$FormattedOrgName"-"$macOSName"-"$macOSVersion".pkg

## At this point we know we have a cached installer but lets check it wasn't unpacked to the applications folder yet.
if [[ ! -e "/Applications/Install macOS $macOSName.app" ]]
then
ScriptLogging "$macOSName.app not found in the Applications folder. Installing cached installer."
## Call the installer which unpacks the cached package to the Applications folder.
"$jamfBinary" install -package "$PackageName" -path /Library/Application\ Support/JAMF/Waiting\ Room -target /  2>&1
fi

if [[ -e "$CachedmacOSFile" ]]
then
ScriptLogging "Deleting cached package from waiting room to free up space...."
/bin/rm -rf "$CachedmacOSFile"
fi
      
# Check if macOS installation app exists in the /Applications folder (cached installer unpacked correctly)
# If it exists, run startosinstall. If not, close Jamf Helper window and exit with error code
if [[ -e "/Applications/Install macOS $macOSName.app" ]]
then
  ScriptLogging "/Applications/Install macOS $macOSName.app is ready to begin installation...."
  ScriptLogging "Running caffeinate command so the Mac doesn't fall asleep"
  caffeinate -d -i -m -u &
  caffeinatepid=$!
  sleep 2
  # Running installation
  if [[ "$arch" == "arm64" ]] 
  then
    ScriptLogging "Running the upgrade installation based on Apple Silicon...."
    ## Using echo and a | here allows passwords with a special character such as $, #, or " to work whereas a here-string will fail.
    echo "${userPass}" | /Applications/Install\ macOS\ "$macOSName".app/Contents/Resources/startosinstall --agreetolicense --forcequitapps --nointeraction --stdinpass --user "${loggedInUser}"
  else
    ScriptLogging "Running the upgrade installation...."
    /Applications/Install\ macOS\ "$macOSName".app/Contents/Resources/startosinstall --agreetolicense --forcequitapps --nointeraction
  fi    
else
  ScriptLogging "/Applications/Install macOS $macOSName.app not found. Exiting with error...."
  ## Close the full screen Jamf Helper window and notify the user of the error with the installation
  killall jamfHelper
  ErrorMSG="There was an error with
the upgrade to macOS
$macOSName $macOSVersion

The update will attempt to
run again tomorrow or you
may try now in the MacHub."
  "$JAMFHelperPath" -windowType utility -title "$JAMFHelperTitle" \
  -icon "$JAMFHelperIcon" -iconSize 128 -heading "$macOSName Upgrade Failed" -alignHeading "$JAMFHelperHeaderAlignment" -description "$ErrorMSG" \
  -alignDescription "$JAMFHelperTextAlignment" -button1 "OK" -timeout 60
  exit 1
fi

sleep 300
killall jamfHelper
### End Policy Call
}

######################### Begin macOS Update  ###########################################
macOSUpdate()
{
## Validate that the Mac is ready to update based on the existence of an installer and power status.

if [[ -e "/Applications/Install macOS $macOSName.app" ]]
then
  ScriptLogging "/Applications/Install macOS $macOSName.app exists and is ready to begin installation...."
  ## Since we have a viable installer in the applications folder might as well use the icon for the OS.
  JAMFHelperIcon="/Applications/Install macOS $macOSName.app/Contents/Resources/InstallAssistant.icns"
else
  ScriptLogging "/Applications/Install macOS $macOSName.app not found. Checking cached status."
  checkmacOSCache
fi

if [[ "$macOSIsCached" == "No" ]]
then 
  ScriptLogging "Reset the update counter and trigger cache macOS policy."
  # The file is not simply removed so that checks elsewhere in the script can run.
  if [[ -e "$UpdateAttemptsFile" ]]
  then
    /bin/echo 0 > "$UpdateAttemptsFile"
  fi
  ## Call the function to check if there is enough free space to cache the installer. If there is not the script will exit.
  ## The "cache" argument is passed in so the function displays appropriate messaging. 
  FreeSpaceCheck cache
  "$jamfBinary" policy -event "$cachemacOS"
  if [[ `stat -f %z "$CachedmacOSFile"` -ge "$CachedFileSize" ]]
  then
	  ScriptLogging "$macOSName $macOSVersion was cached successfully."
	  macOSIsCached="Yes"
    ScriptLogging "Creating dummy receipt for Self Service Policy."
    touch /Library/Application\ Support/JAMF/Receipts/"$macOSName"-"$macOSVersion"_SS.pkg
    ScriptLogging "Running a recon."
	  "$jamfBinary" recon
  fi
else
  checkPower
  if [[ "$PowerStatus" == "Bad" ]]
  then
    ScriptLogging "No sufficient power to begin $macOSName $macOSVersion Upgrade."
  else
    ScriptLogging "$macOSName $macOSVersion is cached and machine has enough power. Beginning install routine"
    startUpdate
  fi
fi 
}

######################### Begin macOS Version Check  ###################################
macOSVersionCheck() {
## This function checks if the computer is already running the version of macOS that script is upgrading to.
## If it is, the cached installer is deleted, recon is called to take computer out of upgrade Smart Group
## and the script exits. This addresses issues where users have upgraded to the defined version outside of the script.
## Due to changes in Apple's number scheme the major version number starting in macOS 11 is the first digit so we must account for that.

if [[ "$macOSUpgradeVersionMajor" -ge "11" ]]
then
  macOSUpgradeVersion="$macOSUpgradeVersionMajor"
fi

if echo "$osVersFull $macOSUpgradeVersion" | awk '{exit $1>=$2?0:1}'
then
  ScriptLogging "This Mac is already running macOS $osVersFull which is the same major version as the upgrade."
  ScriptLogging "Deleting cached installer, update attempts file, any existing OS Installers running recon and exiting...."
  rm -rf "$CachedmacOSFile" &> /dev/null
  rm -rf "$CachedmacOSFile.cache.xml" &> /dev/null
  rm -rf /Applications/*Install\ macOS* &> /dev/null
  if [[ -e "$UpdateAttemptsFile" ]]
  then
    rm -rf "$UpdateAttemptsFile"
    fi
    "$jamfBinary" recon
    exit 0
  fi
}  

###############
##### MAIN ####
###############
## All the function calls are here
macOSVersionCheck 
ScriptLogging "Starting the upgrade process from $osVersFull to macOS $macOSVersion ($macOSName)."
macOSUpdate
