#!/bin/bash

## Version 2
## 12/23/21
## Tom Rice (Macadmins: trice Github: trice81384)

### This script is designed to be run from Jamf Self Service and install a cached macOS installer package and then
### run the installer application. If the installer does not exist it will be cached first which will increase execution time.
### to present the installer in Self Service. 

### It is recommended that that policy that runs this script is scoped to only the machines you wish to upgrade as well as those that have 
### the installer already cached as the caching mechanism in this script should only be used to handle previous failed installations.

### Special thanks to the following for inspiraton on various parts of the script/
### Rich Trouton
### https://github.com/rtrouton
### Mike M
### https://github.com/mm2270
### Alexander Wolpert 
###https://github.com/alex030
### All the people on JAMF Nation and Macadmins

A separate policy to actually cache the installer needs to exist with a custom trigger.

ScriptLogging(){
# Function to provide logging of the script's actions either to the console or the log file specified.
    local LogStamp=$(date +%Y-%m-%d\ %H:%M:%S)
    if [[ -n "$2" ]]
    then
      LOG="$2"
    else
      LOG="PATH TO LOG FILE HERE"
    fi
    
    ## To output to a log file append ' >> $LOG' to the below echo statement 
    echo "$LogStamp" " $1"
}

################### Define Global Variables #############################################

## Parameter 4 passed in from Jamf will set the name of the macOS to be installed.
## This value is used in the case statement below to define parametersfor the OS as well
## as elsewhere throughout the script such as Jamf Helper dialogs.
macOSName="$4"

## Parameter 5 passed in from Jamf will set the name of the organization running the script.
## This name is used in various plists, launch daemons, and other configuration options. 
## If no organization name is specified then the default of "My ORG" will be used.
OrgName="$5"

if [[ -z "$OrgName" ]]
then
OrgName="My ORG"
ScriptLogging "No Organization Name specified. Using \"My ORG\"."
fi

## Remove any white spaces entered with the organizational name and convert it to lower case
FormattedOrgName=$(echo $OrgName | sed 's/ //g' | tr '[:upper:]' '[:lower:]')

## Fill in the values as needed for the version of the OS you'll be installing while adding additional OS Versions as needed.
## Some possible values are:
## Mojave: Version: 10.14.6, Build: 18G84
## Catalina: Version: 10.15.7, Build: 19H15
## Big Sur: Version: 11.6, Build: 20G164

case "$macOSName" in
     "Mojave" )
	      #Version of the macOS to be installed
         macOSVersion=""

	      #Build of the macOS to be installed
        macOSBuild=""

	      #Name of the OS Installer Package
	      PackageName=""
		
	      ##Location of cached Installer
	      CachedmacOSFile="/Library/Application Support/Jamf/Waiting Room/$PackageName"

	      #Expected Size of the Cached installer
	      CachedFileSize=""
		
        ## Free space needed to cache package measured in Gigibytes
        ## Found by taking the amount of GB needed, converting to Gi, and rounding to the next whole number
        ## GB * (1000^3) / (1024^3)
        needed_free_space=""

	      #Catalina Cache Trigger
        cachemacOS="cache$macOSName"
	   ;;

	   "Catalina" )
		    #Version of the macOS to be installed
		    macOSVersion=""
		
		    #Version of the macOS to be installed
		    macOSBuild=""
		
		    #Name of the OS Installer Package
		    PackageName=""
		
		    #Location of cached Installer
		    CachedmacOSFile="/Library/Application Support/Jamf/Waiting Room/$PackageName"
		
		    #Expected Size of the Cached installer
		    CachedFileSize=""
		
        ## Free space needed to cache package measured in Gigibytes
        ## Found by taking the amount of GB needed, converting to Gi, and rounding to the next whole number
        ## GB * (1000^3) / (1024^3)
        needed_free_space=""

		    #Catalina Cache Trigger
        cachemacOS="cache$macOSName"
	   ;;
	
	   "Big Sur" )
		    #Version of the macOS to be installed
		    macOSVersion=""
		
		    #Version of the macOS to be installed
		    macOSBuild=""
		
		    #Name of the OS Installer Package
		    PackageName=""
		
		    #Location of cached Installer
		    CachedmacOSFile="/Library/Application Support/Jamf/Waiting Room/$PackageName"
		
		    #Expected Size of the Cached installer
		    CachedFileSize=""
		
        ## Free space needed to cache package measured in Gigibytes
        ## Found by taking the amount of GB needed, converting to Gi, and rounding to the next whole number
        ## GB * (1000^3) / (1024^3)
        needed_free_space=""

		    #Big Sur Cache Trigger
        cachemacOS="cache$macOSName"
	   ;;
	
	   *)
		    ScriptLogging "Unknown OS input in parameter 4, exiting with error...."
		    exit 1
	   ;;
esac

## Free space on target disk measured in Gigibytes
available_free_space=$(df -g / | tail -1 | awk '{print $4}')

## Current logged in user
loggedInUser=""

##Updates Attempts File
UpdateAttemptsFile="/etc/macOSUpdateAttempts.txt"

## Jamf Helper Stuff
JAMFHelperPath="/Library/Application Support/JAMF/bin/jamfHelper.app/Contents/MacOS/jamfHelper"
JAMFHelperIcon="/System/Library/CoreServices/CoreTypes.bundle/Contents/Resources/FinderIcon.icns"
JAMFHelperTitle="$OrgName: macOS $macOSName Upgrade"
JAMFHelperHeading="$macOSName Upgrade Ready"

## Get the major version of macOS that computer is upgrading to
macOSUpgradeVersionMajor=$( echo $macOSVersion | cut -d. -f1 )
## Get minor version of OS X
osVersMinor=$( sw_vers -productVersion | cut -d. -f2 )

## Set appropriate Restart icon depending on OS version (Can be used for dialog windows)
if [[ "$osVersMinor" -ge "9" ]]; then
   restartIcon="/System/Library/CoreServices/loginwindow.app/Contents/Resources/Restart.tiff"
   else 
   restartIcon="/System/Library/CoreServices/loginwindow.app/Contents/Resources/Restart.png"
fi

######################### JAMF Binary Check #############################################
## This if statement is designed to check for the location of the Jamf binary in multiple 
## places due to changes in OSX associated with JAMF's upgrade to version 9.81
## References to the JAMF Binary must be changed to "$jamfBinary"

if [ -e /usr/local/jamf/bin/jamf ]
   then
      # JAMF Binary found at 9.81 or later location
      ScriptLogging "JAMF Binary found at 9.81 or later location"
      jamfBinary="/usr/local/jamf/bin/jamf"
      #
   elif [ -e /usr/local/bin/jamf ]
   then
      # Alias to the JAMF Binary found
      ScriptLogging "Alias to the JAMF Binary found"
      jamfBinary="/usr/local/bin/jamf"
      #
   else
   ScriptLogging "JAMF Binary not found"
fi

######################### Existing macOS Downloads Check ################################
## Check to see if previous macOS installers have been downloaded and if so remove them.

for OSInstaller in /Applications/*Install\ macOS*
do
   if [ -e "$OSInstaller" ]
   then
    InstallerBuild=$(defaults read "$OSInstaller"/Contents/Info.plist DTSDKBuild)
     if [[ "$InstallerBuild" != "$macOSBuild" ]]
     then
       ScriptLogging "Old $OSInstaller found. Deleting."
       rm -rf "$OSInstaller"
     fi
   fi
done

######################### Free Space Settings ############################################
## If the machine is currently running Yosemite or lower than it needs 19GB of free space prior to
## upgrading otherwise it needs 13GB.

## If installing macOS 11 or greater, the needed_free_space value is kept as indicated in the case statement
## at the top of this script. Otherwise, it is set below

if [[ "$macOSUpgradeVersionMajor" -lt "11" ]]
then
  if [[ "$osVersMinor" -le "10" ]]; then
      needed_free_space="19"
  else
      needed_free_space="13"
  fi
fi

######################### MacOS Install Initialization #####################################
installMacOS()
{
## This function actually installs the macOS upgrade. It provides final installation and reboot
## warnings to the user as well as prepping the environment for the installation. It provides the user
## with a set period of time before the computer will start the installation process. That time period is
## defined as a parameter passed into the script. This function also writes local scripts and launch agents
## to the machine so that it's information can be correctly updated in Jamf after the upgrade and a to authenticate
## to various FileVault prompts so the user is not burdened with repeated authentications.

## Remove remnants of a failed install
if [ -e /macOS\ Install\ Data ]
then
rm -r /macOS\ Install\ Data
fi

## Any outcome of the below if statement requires the mac to stay awake so we caffeinate
ScriptLogging "Running caffeinate command so the Mac doesn't fall asleep"
caffeinate -d -i -m -u &
caffeinatepid=$!

# Check if macOS installation app exists in the /Applications folder
# If it exists run startosinstall. If not try to install or re download the installer.
if [ -e "/Applications/Install macOS $macOSName.app" ]
then
  ScriptLogging "/Applications/Install macOS $macOSName.app exists and is ready to begin installation...."
elif [ -e "$CachedmacOSFile" ]
then
  ScriptLogging "Installing Cached macOS installer to Applications folder."
  "$jamfBinary" install -package "$PackageName" -path /Library/Application\ Support/JAMF/Waiting\ Room -target /  2>&1
else
  ScriptLogging "Cached Package not found. Recaching and notifying the user."
  ScriptLogging "Triggering cache macOS policy."
  CacheMsg="Your computer is downloading the
upgrade for $macOSName $macOSVersion

This window will close when the download is 
finished and the installation process will begin.

This process may take some time."

"$JAMFHelperPath" -windowType utility -title "$JAMFHelperTitle" \
-icon "$JAMFHelperIcon" -iconSize 128 -heading "Upgrade Download" -alignHeading center -description "$CacheMsg" \
-alignDescription center & 

"$jamfBinary" policy -event "$cachemacOS"
"$jamfBinary" install -package "$PackageName" -path /Library/Application\ Support/JAMF/Waiting\ Room -target /  2>&1

jamfHelperUID=$(pgrep jamfHelper)
disown $jamfHelperUID
killall jamfHelper

fi

## Set JAMF Helper Icon to OS Installer Icon
JAMFHelperIcon="/Applications/Install macOS $macOSName.app/Contents/Resources/InstallAssistant.icns"

## Write out a local script (but don't launch it) and a launch daemon to run a recon
## after the OS is upgraded.
cat <<EOF >/Library/Scripts/UpdateInventory
#!/bin/bash
#
#Get Current OS Version
osVers=\$( sw_vers -productVersion )
## JAMF Binary Check
##
## This if statement is designed to check for the location of the jamf binary in multiple places 
## due to changes in OSX associated with JAMF's upgrade to version 9.81
## References to the JAMF Binary must be changed to "$jamfBinary"
##
if [ -e /usr/local/jamf/bin/jamf ]
   then
      # JAMF Binary found at 9.81 or later location
      echo "JAMF Binary found at 9.81 or later location"
      jamfBinary="/usr/local/jamf/bin/jamf"
      #
   elif [ -e /usr/local/bin/jamf ]
   then
      # Alias to the JAMF Binary found
      echo "Alias to the JAMF Binary found"
      jamfBinary="/usr/local/bin/jamf"
      #
   else
   echo "JAMF Binary not found"
fi
## End JAMF Check if statement
## Keep running a while loop until the OS reports itself as being on the current version of Mac OS
while [ "\$osVers" != "$macOSVersion" ]
do
sleep 1
osVers=\$( sw_vers -productVersion )
done

## Wait till the JSS is Reachable or 10 mins for network connectivity.
JSSReachable=\$(jamf checkJSSConnection -retry 0 | grep JSS)
while [ "\$JSSReachable" != "The JSS is available." ]
do
echo "Waiting for the JSS to be reachable."
sleep 5
Counter=\$((Counter + 1))
JSSReachable=\$(jamf checkJSSConnection -retry 0 | grep JSS)
if [ "\$Counter" == 120 ]
then
echo "Waited for 10 mins. Giving up."
JSSReachable="The JSS is available."
fi
done
## Run a recon to upgrade the jss
"\$jamfBinary" recon
rm /Library/LaunchDaemons/net.$OrgName.UpdateInventory.plist
rm /Library/Scripts/UpdateInventory
launchctl unload /Library/LaunchDaemons/net.$OrgName.UpdateInventory.plist
EOF
chown root:wheel /Library/Scripts/UpdateInventory
chmod 755 /Library/Scripts/UpdateInventory
#### Write launch daemon to load cached script
echo '<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple Computer//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
<key>Label</key>
<string>net.$OrgName.UpdateInventory</string>
<key>Program</key>
<string>/Library/Scripts/UpdateInventory</string>
<key>RunAtLoad</key>
<true/>
<key>KeepAlive</key>
<true/>
</dict>
</plist>' > /Library/LaunchDaemons/net.$OrgName.UpdateInventory.plist
chown root:wheel /Library/LaunchDaemons/net.$OrgName.UpdateInventory.plist
chmod 644 /Library/LaunchDaemons/net.$OrgName.UpdateInventory.plist

## Set the initial timer to 300 which will end up equating to 5 mins.
## We use let here so it is sure to assign the variable as a number.
## Probably not necessary but just in case.
let Counter="300"
## Check for the existence of the output file from the JAMF helper command
## left over from previous executions.
if [ -e /tmp/UserInput ]
   then
   rm /tmp/UserInput
fi
## Display a JAMF Helper window notifying the user that a reboot in order to upgrade to macOS will happen at 
## a specified period of time and give them the option to enable it immediately.
## We send the output to a named pipe and keep the process running in the background which allows for two things.
## It keeps the window displayed but allows the while loop to start the countdown right away and by sending the 
## output of command to the named pipe we can then continually assign its contents to a variable inside the while
## loop allowing the if statement in that loop to check the status of the variable which equates to a user selecting
## to reboot immediately. If we didn't do it this way the output of the command would only get checked once when the 
## command initially ran.
RebootMsg="Your computer will begin the upgrade
process to $macOSName $macOSVersion
in 5 mins.

Please save all work and quit any open applications.

Click Reboot to start this process immediately."

FinalRebootMessage="Your computer will begin the upgrade in 1 minute.

Please save all work and quit all applications now."

"$JAMFHelperPath" -windowType utility -title "$JAMFHelperTitle" \
-icon "$JAMFHelperIcon" -iconSize 128 -heading "$JAMFHelperHeading" -alignHeading center -description "$RebootMsg" \
-alignDescription center -button1 "Reboot" > /tmp/UserInput &

## While loop to run for at least 300 iterations (which equals 5 mins) while checking certain conditions.
## We inject a 1 second sleep command into each run of the while loop to approximate 5 minutes. If we did not
## have the sleep command the loop would execute too quickly. Once the loop is over the macOS Upgrade will start
## and their machine will reboot.
while [ "$Counter" != "0" ]
do
## Check contents of named pipe and assign it to UserResponse
UserResponse=$(cat /tmp/UserInput)
## If UserResponse equals 0 (return code of pushing the button) then we assume user has selected to reboot now so
## we run execute the enable macOS Update policy and reboot the machine so it is enforced for the
## current user on login. We also set the counter 1 one as a safety measure in case it doesn't break out
## of the loop right away. One more subtraction from the counter variable would occur causing it to equal
## 0 which would also cause the loop to end and FileVault to enable. We could use a break statement here to
## but I liked this method.
## If the user response has not equated to 0 then we'll pop up a window displaying that there is only 60
## seconds left before the macOS update is started and a reboot happens. We must get the PID of the previous jamfHelper
## process and disown it first (to prevent unnecessary error messages) then kill it before we display the new
## message.
if [ "$UserResponse" == "0" ]
  then
     ScriptLogging "User Choose to reboot. Starting $macOSName $macOSVersion Update."
     Counter="1"
elif [ "$Counter" == 60 ]
  then
     jamfHelperUID=$(pgrep jamfHelper)
     disown $jamfHelperUID
     killall jamfHelper
     "$JAMFHelperPath" -windowType utility -title "$JAMFHelperTitle" \
     -icon "$JAMFHelperIcon" -iconSize 96 -heading "$JAMFHelperHeading" -alignHeading center -description "$FinalRebootMessage" \
     -alignDescription center &
fi
sleep 1
Counter=$((Counter - 1))
done
## Remove the named pipe
if [ -e /tmp/UserInput ]
   then
   rm /tmp/UserInput
fi
jamfHelperUID=$(pgrep jamfHelper)
disown $jamfHelperUID
killall jamfHelper
ScriptLogging "Executing $macOSName $macOSVersion Upgrade Policy"
sleep 3
## Delete the update count file once just so it's gone if it exists
if [ -e "$UpdateAttemptsFile" ]
   then
   rm -r $UpdateAttemptsFile
fi

## We'll add a JAMF Helper full screen window here because it looks nicer and is more restrictive than a progress bar.
## Since it will be a FS window we must remember to set it as a background process so the installer can actually run.
## !!!!!!! We must capture the Helper's PID in the installer postinstall script so we can quit it and allow the installer to run.
## JAMF Helper Variables
FSheading="Please wait as we prepare your computer for the macOS $macOSName $macOSVersion upgrade."
FSdescription="
This process will take approximately 5-10 minutes.
Once completed your computer will reboot and begin the upgrade."

## Launch jamfHelper
"$JAMFHelperPath" -windowType fs -title "" -icon "$JAMFHelperIcon" -heading "$FSheading" -description "$FSdescription" &
##Make sure FV does an authenticated restart
##Might not be necessary but can't hurt
if [[ "$osVersMinor" -ge 8 ]]; then
     FDE=$( fdesetup status | grep "Off" )
     if [ "$FDE" = "" ]; then
           ## only write out launch agent if the OS is equal to macOS Sierra or higher otherwise it will cause the upgrade to fail
           if [[ "$osVersMinor" -ge 12 ]]; then
       ScriptLogging "Write out the a Launch Agent to make sure FV Authenticated restarts during the upgrade work as expected."
       cat <<EOF >/Library/LaunchAgents/com.apple.install.osinstallersetupd.plist
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
    <key>Label</key>
    <string>com.apple.install.osinstallersetupd</string>
    <key>LimitLoadToSessionType</key>
    <string>Aqua</string>
    <key>MachServices</key>
    <dict>
        <key>com.apple.install.osinstallersetupd</key>
        <true/>
    </dict>
    <key>TimeOut</key>
    <integer>90</integer>
    <key>OnDemand</key>
    <true/>
    <key>ProgramArguments</key>
    <array>
        <string>/Applications/Install macOS $macOSName.app/Contents/Frameworks/OSInstallerSetup.framework/Resources/osinstallersetupd</string>
    </array>
</dict>
</plist>
EOF
       ScriptLogging "Setting the correct permissions on and launch the launch agent."
       /usr/sbin/chown root:wheel /Library/LaunchAgents/com.apple.install.osinstallersetupd.plist
       /bin/chmod 644 /Library/LaunchAgents/com.apple.install.osinstallersetupd.plist
       userID=$( id -u ${loggedInUser} )
       /bin/launchctl asuser $userID /Library/LaunchAgents/com.apple.install.osinstallersetupd.plist
       ## End 10.12 Check
       fi
     else
       ScriptLogging "FileVault 2 is not enabled."
     fi
   fi
   
for USER_HOME in /Users/*
  do
    USER_UID=$( basename "$USER_HOME" )
    if [ "$USER_UID" != "Shared" ] 
    then 
        /usr/bin/defaults write "${USER_HOME}"/Library/Preferences/com.apple.SetupAssistant LastPreLoginTasksPerformedBuild -string "$macOSBuild"
        /usr/bin/defaults write "${USER_HOME}"/Library/Preferences/com.apple.SetupAssistant LastPreLoginTasksPerformedVersion -string "$macOSVersion"
        /usr/bin/defaults write "${USER_HOME}"/Library/Preferences/com.apple.SetupAssistant LastSeenDiagnosticsProductVersion -string "$macOSVersion"
        /usr/bin/defaults write "${USER_HOME}"/Library/Preferences/com.apple.SetupAssistant MiniBuddyShouldLaunchToResumeSetup -bool false
        chown "${USER_UID}":staff "${USER_HOME}"/Library/Preferences/com.apple.SetupAssistant.plist
    fi
  done
  
## Cleaning up any leftover cached files
if [ -e "$CachedmacOSFile" ]
then
  ScriptLogging "Removing cached download to free up space."
  /bin/rm -rf "$CachedmacOSFile"
fi

## Write a dummy receipt to track the upgrades
touch /Library/Application\ Support/JAMF/Receipts/$OrgName-"$macOSName"-"$macOSVersion".pkg

# Running installation
ScriptLogging "Running the upgrade installation...."
/Applications/Install\ macOS\ "$macOSName".app/Contents/Resources/startosinstall --agreetolicense --forcequitapps --nointeraction

sleep 300
killall jamfHelper
### End Policy Call
}

######################### Start OS Install ##############################################
## This prompts the user to begin the macOS upgrade allowing them to cancel if they choose or notifying 
## them if there is not enough disk space to being the installation.

InstallerMessage="Please save all your work, quit open programs, and make sure your computer is plugged in.

This process will take approximately 5-10 minutes.

Once completed your computer will reboot and begin the upgrade."


if [[ "$available_free_space" -ge "$needed_free_space" ]]
  then
  ScriptLogging "$available_free_space gigabytes found as free space on boot drive. Prompting user to install OS."
 ## Call JAMF Helper Window notifying user of Update
UserResponse=$("$JAMFHelperPath" -windowType utility -title "$JAMFHelperTitle" \
               -icon "$JAMFHelperIcon" -heading "$JAMFHelperHeading" -alignHeading center -description "$InstallerMessage" \
               -alignDescription center -button1 "Upgrade" -button2 "Cancel" -cancelButton 1)
if [ "$UserResponse" == 2 ]
   then
   ScriptLogging "User pressed Cancel"
 elif [ "$UserResponse" == 0 ]
  then
  ScriptLogging "User chose to upgrade to $macOSName $macOSVersion."
  installMacOS
## End User Choice If
fi
else
   ScriptLogging "Not enough free space for install displaying message to user."
   DiskSpaceMSG="Your Mac does not have enough free space to update to $macOSName $macOSVersion.
   At least $needed_free_space GB of free space is needed.

   Please back up and remove files that are no longer needed so that the installer may run."
   JAMFHelperIcon="/System/Library/CoreServices/CoreTypes.bundle/Contents/Resources/AlertCautionIcon.icns"
   UserResponse=$("$JAMFHelperPath" -windowType utility -title "$JAMFHelperTitle" \
                  -icon "$JAMFHelperIcon" -heading "Not Enough Free Space" -alignHeading center -description "$DiskSpaceMSG" \
                 -alignDescription center -button1 "Quit" )
         
## End Disk Space Check If
fi
